

   Pour chaque voisin v de n  
                  Si v dans NoeudsNonvisités 
                        Enlever v de NoeudsNonvisités 
                        Precurseur[v] = n 
                        AVisiter.Empiler(v) // comme c'est une pile c'est le dernier noeud de la boucle for qui sera le premier a etre depiler





using System; 
using System.Collections.Generic; 
  
public class BellmanFord : Algorithm 
{ 
    public BellmanFord(Graph _graph, IHM _ihm) : base(_graph, _ihm) {} 
  
    protected override void Run() 
    { 
          // Initialisation 
          bool distanceChanged = true; 
          int i = 0; 
          List<Arc> arcsList = graph.ArcsList(); 
  
          // Boucle principale 
          int nbLoopMax = graph.NodesCount() - 1; 
          while (i < nbLoopMax && distanceChanged)   // A chaque tour de boucle, mise a jour de la distance depuis le predecesseur et de leur 
                                                        predecesseur de chaque noeud en évaluant tous les arcs du neoud (A)
          { 
                 distanceChanged = false; 
                 foreach (Arc arc in arcsList) 
                 { 
                        if (arc.FromNode.DistanceFromBegin + 
arc.Cost < arc.ToNode.DistanceFromBegin) -----  A  ------
                        { 
                               arc.ToNode.DistanceFromBegin = 
arc.FromNode.DistanceFromBegin + arc.Cost; 
                               arc.ToNode.Precursor = 
arc.FromNode; 
                               distanceChanged = true; 
                        } 
                 } 
                 i++; 
          } 
  
          // Test si boucle négative 
          foreach (Arc arc in arcsList) 
          { 
                 if (arc.FromNode.DistanceFromBegin + arc.Cost < arc.ToNode.DistanceFromBegin) 
                 { 
                        // Impossible de trouver un chemin 
                        throw new Exception(); 
                 } 
          } 
    } 
}





using System.Collections.Generic; 
using System.Linq; 
  
public class Dijkstra : Algorithm 
{ 
    public Dijkstra(Graph _graph, IHM _ihm) : base(_graph, _ihm) { } 
  
    protected override void Run() 
    { 
           // Initialisation 
           List<Node> nodesToVisit = graph.NodesList(); 
           bool exitReached = false; 
  
           // Boucle principale 
           while (nodesToVisit.Count != 0 && !exitReached) 
           { 
                   Node currentNode = nodesToVisit.FirstOrDefault(); 
                   foreach (Node newNode in nodesToVisit)     // Fonction d'evaluation noeud ayant le plus petit cout parmi les noeud a visité.
                   { 
                          if (newNode.DistanceFromBegin < currentNode.DistanceFromBegin) 
                          { 
                                 currentNode = newNode; 
                          } 
                  } 
  
                  if (currentNode == graph.ExitNode()) 
                  { 
                          exitReached = true; 
                  } 
                  else 
                  { 
                          List<Arc> arcsFromCurrentNode = graph.ArcsList(currentNode); 
  
                          foreach (Arc arc in arcsFromCurrentNode) 
                          { 
                                  if (arc.FromNode.DistanceFromBegin + 
arc.Cost < arc.ToNode.DistanceFromBegin) 
                                 { 
                                        arc.ToNode.DistanceFromBegin = 
arc.FromNode.DistanceFromBegin + arc.Cost; 
                                        arc.ToNode.Precursor = 
arc.FromNode; 
                                 } 
                          } 
  
                          nodesToVisit.Remove(currentNode);  // pour ne plus l'évaluer
                  } 
           } 
    } 
}
